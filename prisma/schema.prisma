// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                Int                 @unique @default(autoincrement())
  email             String              @unique
  name              String
  password          String
  user_organization user_organization[]
  post              post[]
  permissions       user_permission[]
  plan              PLAN                @default(FREE)
  lastLogin         DateTime?
  createdAt         DateTime            @default(now())
}

enum PLAN {
  PAID
  FREE
}

model organization {
  id                Int                 @unique @default(autoincrement())
  name              String              @unique
  user_organization user_organization[]
  permission        permission[]
  resources         resource[]
  userOrgId         String
  createdAt         DateTime            @default(now())
  roles             role[]
}

// user can be member of more than one organization, one organization can have many members 
model user_organization {
  id             Int          @unique @default(autoincrement())
  user           user         @relation(fields: [userId], references: [id])
  userId         Int
  organization   organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  role           role         @relation(fields: [roleId], references: [id])
  roleId         Int

  createdAt DateTime @default(now())

  @@unique([userId, organizationId])
}

// resources
model post {
  id          Int      @unique @default(autoincrement())
  title       String
  description String
  author      user     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
}

// action
model action {
  id        Int      @unique @default(autoincrement())
  name      ACTION
  createdAt DateTime @default(now())
}

enum ACTION {
  CREATE
  DELETE
  UPDATE
  READ
}

model permission {
  id              Int               @unique @default(autoincrement())
  organization    organization      @relation(fields: [organizationId], references: [id])
  organizationId  Int
  action          ACTION?
  resource        resource?         @relation(fields: [resourceId], references: [id])
  resourceActions ACTION[]
  permission_role permission_role[]
  user_permission user_permission[]
  resourceId      Int?

  createdAt DateTime @default(now())

  @@unique([action, resourceId])
}

// abstract resource contains definition of resource
model resource {
  id             Int          @unique @default(autoincrement())
  name           String
  organization   organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  attributes     attribute[]
  permission     permission[]

  createdAt     DateTime        @default(now())
  resource_atom resource_atom[]

  // --- disabled will be used later for MTM relations
  // === {relatedResource:string (id), relationType:RELATION_TYPE} === 
  relations Json[] @db.JsonB

  @@unique([organizationId, name])
}

// attributes definition of abstract resource
model attribute {
  id           Int            @unique @default(autoincrement())
  name         String
  type         ATTRIBUTE_TYPE @default(ALPHANUM)
  resource     resource?      @relation(fields: [resourceId], references: [id])
  resourceId   Int?
  relationType RELATION_TYPE  @default(OTO) // if no "relationId" provided means there is no relation but OTO with the attribtue itself
  relationId   Int?

  @@unique([resourceId, name])
}

// Meterial form of abstract resource
model resource_atom {
  resource resource @relation(fields: [resourceId], references: [id])
  id       Int      @unique @default(autoincrement())
  data     Json     @db.JsonB

  // name:attribute_name, value:string|string[]
  relationData String[] // will store multiple ids in case of OTM/MTM
  resourceId   Int
}

enum RELATION_TYPE {
  OTO
  MTM
  OTM
}

enum ATTRIBUTE_TYPE {
  MEDIA
  ALPHANUM // can be a number or a string
  RESOURCE // relation to other resources
}

model user_permission {
  createdAt    DateTime   @default(now())
  id           Int        @unique @default(autoincrement())
  permission   permission @relation(fields: [permissionId], references: [id])
  permissionId Int
  user         user       @relation(fields: [userId], references: [id])
  userId       Int
}

enum RESOURCE {
  POST
}

model permission_role {
  createdAt    DateTime   @default(now())
  id           Int        @unique @default(autoincrement())
  role         role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   permission @relation(fields: [permissionId], references: [id])
  permissionId Int
}

model role {
  createdAt         DateTime            @default(now())
  id                Int                 @unique @default(autoincrement())
  name              String              @unique
  permission_role   permission_role[]
  user_organization user_organization[]
  organization      organization        @relation(fields: [organizationId], references: [id])
  organizationId    Int
}

model media {
  createdAt DateTime @default(now())
  id        Int      @unique @default(autoincrement())
  type      MEDIA
  url       String
}

enum MEDIA {
  IMAGE
  VIDEO
}

enum ROLE {
  ADMIN
  USER
}
